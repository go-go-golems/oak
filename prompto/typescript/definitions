#!/usr/bin/env bash

# Script to call oak with typescript definitions/types and optional --with-body flag

usage() {
    echo "Usage: $0 [--with-body] <file1> [file2] ..."
    echo
    echo "Options:"
    echo "  --with-body    Include body in the typescript definitions."
    echo "  --with-comments    Include comments in the typescript definitions."
    echo "  --with-private     Include private definitions"
    echo
    echo "Arguments:"
    echo "  file1, file2, ...    One or more filenames to process with oak."
    echo
    echo "Example:"
    echo "  $0 --with-body file1.ts file2.ts"
    echo "  $0 file1.ts file2.ts"
}

# Check if no arguments were provided
if [ $# -eq 0 ]; then
    usage
    exit 1
fi

# Initialize an empty array to store filenames
filenames=()

# Initialize a variable to store the flag status
with_body=false
with_comments=false
with_private=false

for arg in "$@"
do
    if [[ $arg == "--with-body" ]]; then
        with_body=true
    elif [[ $arg == "--with-comments" ]]; then
        with_comments=true
    elif [[ $arg == "--with-private" ]]; then
        with_private=true
    elif [[ $arg == "-h" ]] || [[ $arg == "--help" ]]; then
        usage
        exit 0
    else
        filenames+=("$arg")
    fi
done

# Check if filenames are provided
if [ ${#filenames[@]} -eq 0 ]; then
    echo "Error: No filenames provided."
    usage
    exit 1
fi

echo "Types and definitions in ${filenames[@]}"

oak typescript types "${filenames[@]}"

echo
echo

# make a list of flags to pass typescript definitions based on with_body and with_comments
flags=()
if [ "$with_body" = true ]; then
    flags+=("--with-body")
fi
if [ "$with_comments" = true ]; then
    flags+=("--with-comments")
fi
if [ "$with_private" = true ]; then
    flags+=("--with-private")
fi

echo oak typescript definitions "${flags[@]}" "${filenames[@]}"
