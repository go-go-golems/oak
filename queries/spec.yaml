language: go

queries:
  - name: binaryExpressionsWithNumberLiterals
    query: |
      (binary_expression
        (number_literal) @left
        (number_literal) @right)

  - name: binaryExpressionsWithStringLiterals
    query: |
      (binary_expression
        (string_literal) @string)

  - name: assignmentExpressionsWithMemberExpressions
    query: |
      (assignment_expression
        left: (member_expression
          object: (call_expression)) @member)

  - name: classDeclarationsWithoutTypeParameters
    query: |
      (class_declaration
        name: (identifier) @class_name
        !type_parameters)

  - name: functionAssignmentToIdentifier
    query: |
      (assignment_expression
        left: (identifier) @the_function_name
        right: (function))

  - name: methodDefinitions
    query: |
      (class_declaration
        name: (identifier) @the_class_name
        body: (class_body
          (method_definition
            name: (property_identifier) @the_method_name)))

  - name: sequenceOfComments
    query: |
      (comment)+ @comments

  - name: classDeclarationsWithDecorators
    query: |
      (class_declaration
        (decorator)* @the_decorator
        name: (identifier) @the_name)

  - name: functionCallsWithStringArgument
    query: |
      (call_expression
        function: (identifier) @the_function
        arguments: (arguments (string)? @the_string_arg))

  - name: commentFollowedByFunctionDeclaration
    query: |
      (
        (comment) @comment
        (function_declaration) @function
      )

  - name: commaSeparatedSeriesOfNumbers
    query: |
      (
        (number) @number
        ("," (number))* @numbers
      )

  - name: callToVariableOrObjectProperty
    query: |
      (call_expression
        function: [
          (identifier) @function
          (member_expression
            property: (property_identifier) @method)
        ])

  - name: keywordTokens
    query: |
      [
        "break"
        "delete"
        "else"
        "for"
        "function"
        "if"
        "return"
        "try"
        "while"
      ] @keyword

  - name: nodesInsideCall
    query: |
      (call (_) @call_inner)

  - name: firstIdentifierInArray
    query: |
      (array . (identifier) @the_element)

  - name: lastExpressionInBlock
    query: |
      (block (_) @last_expression .)

  - name: consecutiveIdentifiersInDottedName
    query: |
      (dotted_name
        (identifier) @prev_id
        .
        (identifier) @next_id)

  - name: screamingSnakeCaseIdentifiers
    query: |
      (
        (identifier) @constant
        (#match? @constant "^[A-Z][A-Z_]+")
      )

  - name: keyValuePairsWithSameName
    query: |
      (
        (pair
          key: (property_identifier) @key_name
          value: (identifier) @value_name)
        (#eq? @key_name @value_name)
      )

template: |
  Binary Expressions with Number Literals:
  {{ range .binaryExpressionsWithNumberLiterals }}
  - Left: {{ .left.text }}
    Right: {{ .right.text }}
  {{ end }}

  Binary Expressions with String Literals:
  {{ range .binaryExpressionsWithStringLiterals }}
  - String: {{ .string.text }}
  {{ end }}

  ... (Add the rest of the query results in the template)