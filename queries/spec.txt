      (binary_expression
        (number_literal) @left
        (number_literal) @right)

      (binary_expression
        (string_literal) @string)

      (assignment_expression
        left: (member_expression
          object: (call_expression)) @member)

      (class_declaration
        name: (identifier) @class_name
        !type_parameters)

      (assignment_expression
        left: (identifier) @the_function_name
        right: (function))

      (class_declaration
        name: (identifier) @the_class_name
        body: (class_body
          (method_definition
            name: (property_identifier) @the_method_name)))

      (comment)+ @comments

      (class_declaration
        (decorator)* @the_decorator
        name: (identifier) @the_name)

      (call_expression
        function: (identifier) @the_function
        arguments: (arguments (string)? @the_string_arg))

      (
        (comment) @comment
        (function_declaration) @function
      )

      (
        (number) @number
        ("," (number))* @numbers
      )

      (call_expression
        function: [
          (identifier) @function
          (member_expression
            property: (property_identifier) @method)
        ])

      [
        "break"
        "delete"
        "else"
        "for"
        "function"
        "if"
        "return"
        "try"
        "while"
      ] @keyword

      (call (_) @call_inner)

      (array . (identifier) @the_element)

      (block (_) @last_expression .)

      (dotted_name
        (identifier) @prev_id
        .
        (identifier) @next_id)

      (
        (identifier) @constant
        (#match? @constant "^[A-Z][A-Z_]+")
      )

      (
        (pair
          key: (property_identifier) @key_name
          value: (identifier) @value_name)
        (#eq? @key_name @value_name)
      )

template: |
  Results:{{ range $v := .Results }}
    {{ $v.Name }}: {{ range $match := $v.Matches }}{{ range $captureName, $captureValue := $match }}
       {{ $captureName }}: {{ $captureValue }}{{ end }}
    {{end}}{{ end }}

