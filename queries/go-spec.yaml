language: go

queries:
  - name: binaryExpressionsWithNumberLiterals
    query: |
      (binary_expression
        (int_literal) @left
        (int_literal) @right)

  - name: binaryExpressionsWithStringLiteral
    query: |
      (binary_expression
        (interpreted_string_literal) @string)

  - name: assignmentExpressionsWithMemberExpression
    query: |
      (assignment_statement
        left: (selector_expression
          operand: (call_expression)) @member)

  - name: classDeclarationsWithoutTypeParameters
    query: |
      (type_declaration
        name: (type_identifier) @class_name
        !type_parameters)

  - name: assignmentOfFunctionToIdentifier
    query: |
      (assignment_statement
        left: (identifier) @the_function_name
        right: (function_literal))

  - name: methodDefinitionsInClass
    query: |
      (type_declaration
        name: (type_identifier) @the_class_name
        body: (struct_type
          (field_declaration
            name: (field_identifier) @the_method_name)))

  - name: sequenceOfComments
    query: |
      (comment)+ @comments

  - name: classDeclarationsWithDecorators
    query: |
      (type_declaration
        (decorator)* @the_decorator
        name: (type_identifier) @the_name)

  - name: functionCallsWithStringArgument
    query: |
      (call_expression
        function: (identifier) @the_function
        arguments: (argument_list (interpreted_string_literal)? @the_string_arg))

  - name: commentFollowedByFunctionDeclaration
    query: |
      (
        (comment) @comment
        (function_declaration) @function
      )

  - name: commaSeparatedSeriesOfNumbers
    query: |
      (
        (int_literal) @number
        ("," (int_literal))* @numbers
      )

  - name: callToVariableOrObjectProperty
    query: |
      (call_expression
        function: [
          (identifier) @function
          (selector_expression
            field: (field_identifier) @method)
        ])

  - name: keywordTokens
    query: |
      [
        "break"
        "delete"
        "else"
        "for"
        "func"
        "if"
        "return"
        "try"
        "while"
      ] @keyword

  - name: anyNodeInsideCall
    query: |
      (call_expression (_) @call_inner)

  - name: firstIdentifierInArray
    query: |
      (array_type . (type_identifier) @the_element)

  - name: lastExpressionInBlock
    query: |
      (block (_) @last_expression .)

  - name: consecutiveIdentifiersInDottedName
    query: |
      (selector_expression
        operand: (identifier) @prev_id
        field: (field_identifier) @next_id)

  - name: identifierInScreamingSnakeCase
    query: |
      (
        (identifier) @constant
        (#match? @constant "^[A-Z][A-Z_]+")
      )

  - name: keyValuePairsWithSameName
    query: |
      (
        (key_value_pair
          key: (field_identifier) @key_name
          value: (identifier) @value_name)
        (#eq? @key_name @value_name)
      )

template: |
  Results:{{ range $v := .Results }}
    {{ $v.Name }}: {{ range $match := $v.Matches }}{{ range $captureName, $captureValue := $match }}
       {{ $captureName }}: {{ $captureValue }}{{ end }}
    {{end}}{{ end }}
